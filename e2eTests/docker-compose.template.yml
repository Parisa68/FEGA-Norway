name: fega-norway

services:

  # TSD

  tsd:
    container_name: tsd
    hostname: tsd
    image: tsd-api-mock:latest
    depends_on:
      file-orchestrator:
        condition: service_healthy
    ports:
      - "5006:5006" # This is the JDWP debug port. See command below.
    build: ../services/tsd-api-mock
    volumes:
      - tsd-inbox:/tsd/p11/data/durable/apps/ega/
      - tsd-certs:/etc/jwt/public_keys/
      - tsd-certs:/etc/ega/ssl/
    command: # See services/tsd-api-mock/Dockerfile
      - "java"
      - "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006"
      - "-XX:+UseG1GC"
      - "-jar"
      - "app.jar"

  mq:
    container_name: mq
    hostname: mq
    image: rabbitmq:4.1.1-management-alpine
    ports:
      - "5672:5672"
      - "15671:15671"
    depends_on:
      file-orchestrator:
        condition: service_healthy
    volumes:
      - mq-confs-and-certs:/etc/rabbitmq
    command: sh -c "rabbitmq-plugins enable --offline rabbitmq_federation rabbitmq_federation_management rabbitmq_shovel rabbitmq_shovel_management && rabbitmq-server"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 20s
      retries: 3

  # PROXY

  proxy:
    container_name: proxy
    hostname: proxy
    image: tsd-proxy:latest
    build: ../services/localega-tsd-proxy
    depends_on:
      file-orchestrator:
        condition: service_healthy
      tsd:
        condition: service_started
      mq:
        condition: service_healthy
      cegamq:
        condition: service_started
      postgres:
        condition: service_started
      redis:
        condition: service_started
    links:
      - tsd
      - mq
      - cegamq
      - postgres
      - redis
    ports:
      - "10443:8080"
      - "5005:5005" # This is the JDWP debug port. See command below.
    environment:
      - SSL_ENABLED=false
      - TSD_SECURE=false
      - DB_PORT=5432
      - ROOT_CERT_PASSWORD=<<PROXY_ROOT_CERT_PASSWORD>>
      - TSD_ROOT_CERT_PASSWORD=<<PROXY_TSD_ROOT_CERT_PASSWORD>>
      - SERVER_CERT_PASSWORD=<<PROXY_SERVER_CERT_PASSWORD>>
      - CLIENT_ID=<<PROXY_CLIENT_ID>>
      - CLIENT_SECRET=<<PROXY_CLIENT_SECRET>>
      - BROKER_HOST=<<PROXY_BROKER_HOST>>
      - BROKER_PORT=<<PROXY_BROKER_PORT>>
      - BROKER_USERNAME=<<PROXY_BROKER_USERNAME>>
      - BROKER_PASSWORD=<<PROXY_BROKER_PASSWORD>>
      - BROKER_VHOST=<<PROXY_BROKER_VHOST>>
      - BROKER_VALIDATE=<<PROXY_BROKER_VALIDATE>>
      - BROKER_SSL_ENABLED=<<PROXY_BROKER_SSL_ENABLED>>
      - EXCHANGE=<<PROXY_EXCHANGE>>
      - CEGA_AUTH_URL=<<PROXY_CEGA_AUTH_URL>>
      - CEGA_USERNAME=<<PROXY_CEGA_USERNAME>>
      - CEGA_PASSWORD=<<PROXY_CEGA_PASSWORD>>
      - TSD_HOST=<<PROXY_TSD_HOST>>
      - TSD_ACCESS_KEY=<<PROXY_TSD_ACCESS_KEY>>
      - POSTGRES_PASSWORD=<<PROXY_POSTGRES_PASSWORD>>
      - ADMIN_USER=admin
      - ADMIN_PASSWORD=aDm!n_01x.
    volumes:
      - proxy-certs:/etc/ega/
      #- custom_path:/app/static/ # Serves from a directory
    command: # See services/localega-tsd-proxy/Dockerfile
      - "java"
      - "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
      - "-XX:+UseG1GC"
      - "-jar"
      - "app.jar"

  interceptor:
    container_name: interceptor
    hostname: interceptor
    image: mq-interceptor:latest
    build: ../services/mq-interceptor
    depends_on:
      file-orchestrator:
        condition: service_healthy
      cegamq:
        condition: service_started
      mq:
        condition: service_healthy
      postgres:
        condition: service_started
    environment:
      - POSTGRES_CONNECTION=<<INTERCEPTOR_POSTGRES_CONNECTION>>
      - CEGA_MQ_CONNECTION=<<INTERCEPTOR_CEGA_MQ_CONNECTION>>
      - CEGA_MQ_EXCHANGE=localega
      - CEGA_MQ_QUEUE=v1.files
      - LEGA_MQ_CONNECTION=<<INTERCEPTOR_MQ_CONNECTION>>
      - LEGA_MQ_EXCHANGE=sda
      - LEGA_MQ_QUEUE=files

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres
    depends_on:
      file-orchestrator:
        condition: service_healthy
    environment:
      - POSTGRES_PASSWORD=<<POSTGRES_PASSWORD>>
    volumes:
      - postgres-data:/var/lib/postgresql/data/
      - postgres-confs:/docker-entrypoint-initdb.d/

  # SDA

  db:
    container_name: db
    hostname: db
    image: ghcr.io/neicnordic/sensitive-data-archive:v2.0.20-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sda
      - PGDATA=/var/lib/postgresql/data
      - POSTGRES_USER=<<SDA_DB_USERNAME>>
      - POSTGRES_PASSWORD=<<SDA_DB_PASSWORD>>
      - POSTGRES_SERVER_CERT=
      - POSTGRES_SERVER_KEY=
      - POSTGRES_SERVER_CACERT=
      - POSTGRES_VERIFY_PEER=
    volumes:
      - db-data:/var/lib/postgresql/data
      - db-certs:/etc/ega/
    depends_on:
      file-orchestrator:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "pg_isready", "-h", "localhost", "-U", "postgres" ]
      interval: 5s
      timeout: 20s
      retries: 3

  ingest:
    container_name: ingest
    hostname: ingest
    image: ghcr.io/neicnordic/sensitive-data-archive:v2.0.20
    depends_on:
      file-orchestrator:
        condition: service_healthy
      db:
        condition: service_healthy
      mq:
        condition: service_healthy
    links:
      - mq
      - db
    environment:
      - ARCHIVE_TYPE=posix
      - ARCHIVE_LOCATION=/ega/archive
      - BROKER_HOST=<<BROKER_HOST>>
      - BROKER_PORT=5672
      - BROKER_USER=<<PRIVATE_BROKER_USER>>
      - BROKER_PASSWORD=<<PRIVATE_BROKER_PASSWORD>>
      - BROKER_VHOST=<<PRIVATE_BROKER_VHOST>>
      - BROKER_QUEUE=ingest
      - BROKER_EXCHANGE=sda
      - BROKER_ROUTINGKEY=archived
      - BROKER_ROUTINGERROR=error
      - BROKER_SSL=false
      - BROKER_VERIFYPEER=false
      - BROKER_CACERT=
      - BROKER_CLIENTCERT=
      - BROKER_CLIENTKEY=
      - C4GH_PASSPHRASE=<<C4GH_PASSPHRASE>>
      - C4GH_FILEPATH=/etc/ega/ega.sec
      - DB_HOST=<<SDA_DB_HOST>>
      - DB_PORT=5432
      - DB_USER=<<SDA_DB_USERNAME>>
      - DB_PASSWORD=<<SDA_DB_PASSWORD>>
      - DB_DATABASE=<<SDA_DB_DATABASE_NAME>>
      - DB_SSLMODE=disable
      - DB_CLIENTCERT=
      - DB_CLIENTKEY=
      - INBOX_TYPE=posix
      - INBOX_LOCATION=/ega/inbox
      - LOG_LEVEL=debug
    volumes:
      - tsd-inbox:/ega/inbox/
      - tsd-vault:/ega/archive/
      - sda-certs:/etc/ega/
    command: "sda-ingest"

  verify:
    container_name: verify
    hostname: verify
    image: ghcr.io/neicnordic/sensitive-data-archive:v2.0.20
    depends_on:
      file-orchestrator:
        condition: service_healthy
      db:
        condition: service_healthy
      mq:
        condition: service_healthy
    links:
      - mq
      - db
    environment:
      - ARCHIVE_TYPE=posix
      - ARCHIVE_LOCATION=/ega/archive
      - BROKER_HOST=<<MQ_HOST>>
      - BROKER_PORT=5672
      - BROKER_USER=<<PRIVATE_BROKER_USER>>
      - BROKER_PASSWORD=<<PRIVATE_BROKER_PASSWORD>>
      - BROKER_VHOST=<<PRIVATE_BROKER_VHOST>>
      - BROKER_QUEUE=archived
      - BROKER_EXCHANGE=sda
      - BROKER_ROUTINGKEY=verified
      - BROKER_ROUTINGERROR=error
      - BROKER_SSL=false
      - BROKER_VERIFYPEER=false
      - BROKER_CACERT=
      - BROKER_CLIENTCERT=
      - BROKER_CLIENTKEY=
      - C4GH_PASSPHRASE=<<C4GH_PASSPHRASE>>
      - C4GH_FILEPATH=/etc/ega/ega.sec
      - DB_HOST=<<SDA_DB_HOST>>
      - DB_PORT=5432
      - DB_USER=<<SDA_DB_USERNAME>>
      - DB_PASSWORD=<<SDA_DB_PASSWORD>>
      - DB_DATABASE=<<SDA_DB_DATABASE_NAME>>
      - DB_SSLMODE=disable
      - DB_CLIENTCERT=
      - DB_CLIENTKEY=
      - INBOX_LOCATION=/ega/inbox
      - LOG_LEVEL=debug
    volumes:
      - tsd-inbox:/ega/inbox/
      - tsd-vault:/ega/archive/
      - sda-certs:/etc/ega/
    command: "sda-verify"

  finalize:
    container_name: finalize
    hostname: finalize
    image: ghcr.io/neicnordic/sensitive-data-archive:v2.0.20
    depends_on:
      file-orchestrator:
        condition: service_healthy
      db:
        condition: service_healthy
      mq:
        condition: service_healthy
    links:
      - mq
      - db
    environment:
      - BROKER_HOST=<<MQ_HOST>>
      - BROKER_PORT=5672
      - BROKER_USER=<<PRIVATE_BROKER_USER>>
      - BROKER_PASSWORD=<<PRIVATE_BROKER_PASSWORD>>
      - BROKER_VHOST=<<PRIVATE_BROKER_VHOST>>
      - BROKER_QUEUE=accessionIDs
      - BROKER_EXCHANGE=sda
      - BROKER_ROUTINGKEY=completed
      - BROKER_ROUTINGERROR=error
      - BROKER_SSL=false
      - BROKER_VERIFYPEER=false
      - BROKER_CACERT=
      - BROKER_CLIENTCERT=
      - BROKER_CLIENTKEY=
      - DB_HOST=<<SDA_DB_HOST>>
      - DB_PORT=5432
      - DB_USER=<<SDA_DB_USERNAME>>
      - DB_PASSWORD=<<SDA_DB_PASSWORD>>
      - DB_DATABASE=<<SDA_DB_DATABASE_NAME>>
      - DB_SSLMODE=disable
      - DB_CLIENTCERT=
      - DB_CLIENTKEY=
      - LOG_LEVEL=debug
    command: "sda-finalize"
    volumes:
      - sda-certs:/etc/ega/

  mapper:
    container_name: mapper
    hostname: mapper
    image: ghcr.io/neicnordic/sensitive-data-archive:v2.0.20
    depends_on:
      file-orchestrator:
        condition: service_healthy
      db:
        condition: service_healthy
      mq:
        condition: service_healthy
    links:
      - mq
      - db
    environment:
      - BROKER_HOST=<<MQ_HOST>>
      - BROKER_PORT=5672
      - BROKER_USER=<<PRIVATE_BROKER_USER>>
      - BROKER_PASSWORD=<<PRIVATE_BROKER_PASSWORD>>
      - BROKER_VHOST=<<PRIVATE_BROKER_VHOST>>
      - BROKER_QUEUE=mappings
      - BROKER_EXCHANGE=sda
      - BROKER_ROUTINGERROR=error
      - BROKER_SSL=false
      - BROKER_VERIFYPEER=false
      - BROKER_CACERT=
      - BROKER_CLIENTCERT=
      - BROKER_CLIENTKEY=
      - DB_HOST=<<SDA_DB_HOST>>
      - DB_PORT=5432
      - DB_USER=<<SDA_DB_USERNAME>>
      - DB_PASSWORD=<<SDA_DB_PASSWORD>>
      - DB_DATABASE=<<SDA_DB_DATABASE_NAME>>
      - DB_SSLMODE=disable
      - DB_CLIENTCERT=
      - DB_CLIENTKEY=
      - LOG_LEVEL=debug
      - INBOX_LOCATION=/ega/inbox
    volumes:
      - tsd-inbox:/ega/inbox
      - sda-certs:/etc/ega/
    command: "sda-mapper"

  intercept:
    container_name: intercept
    hostname: intercept
    image: ghcr.io/neicnordic/sensitive-data-archive:v2.0.20
    depends_on:
      file-orchestrator:
        condition: service_healthy
      db:
        condition: service_healthy
      mq:
        condition: service_healthy
    environment:
      - BROKER_HOST=mq
      - BROKER_PORT=5672
      - BROKER_USER=admin
      - BROKER_PASSWORD=guest
      - BROKER_QUEUE=files
      - BROKER_VHOST=test
      - BROKER_EXCHANGE=sda
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=ro0tpasswd
      - DB_DATABASE=sda
      - DB_SSLMODE=disable
      - LOG_LEVEL=debug
    links:
      - mq
      - db
      - ingest
      - verify
      - finalize
      - mapper
    command: "sda-intercept"


  # Out

  doa:
    container_name: doa
    hostname: doa
    image: ghcr.io/neicnordic/sda-doa:v1.6.188
    depends_on:
      file-orchestrator:
        condition: service_healthy
      db:
        condition: service_healthy
      mq:
        condition: service_healthy
    links:
      - mq
      - db
    ports:
      - "80:8080"
      - "8088:8088"
    environment:
      - SSL_MODE=disable # PG SSL MODE
      - SSL_ENABLED=false
      - ARCHIVE_PATH=<<ARCHIVE_PATH>>
      - DB_INSTANCE=<<SDA_DB_HOST>>
      - POSTGRES_USER=<<SDA_DB_USERNAME>>
      - POSTGRES_DB=<<SDA_DB_DATABASE_NAME>>
      - POSTGRES_PASSWORD=<<SDA_DB_PASSWORD>>
      - OUTBOX_ENABLED=false
    volumes:
      - tsd-vault:/ega/archive/
      - doa-certs:/etc/ega/
    command:
      - "java"
      - "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8088"
      - "-jar"
      - "/localega-doa.jar"

  # CEGA

  cegamq:
    container_name: cegamq
    hostname: cegamq
    image: rabbitmq:4.1.1-management-alpine
    environment:
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/conf/cega
      - RABBITMQ_ENABLED_PLUGINS_FILE=/etc/rabbitmq/conf/cega.plugins
      - RABBITMQ_NODE_PORT=5673
    depends_on:
      file-orchestrator:
        condition: service_healthy
    ports:
      - "5673:5673"
      - "15672:15672"
      - "25672:15672"
    volumes:
      - cegamq-confs:/etc/rabbitmq/conf
      - cegamq-certs:/etc/rabbitmq/ssl
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"
        ]
      interval: 5s
      timeout: 20s
      retries: 3
    command: sh -c "rabbitmq-server"

  cegaauth:
    container_name: cegaauth
    hostname: cegaauth
    image: cega-mock:latest
    build: ../services/cega-mock
    command:
      [
        "/app/cega-mock",
        "0.0.0.0",
        "8443"
      ]
    environment:
      - CEGA_USERS_PASSWORD=dummy
      - CEGA_USERS_USER=dummy
    ports:
      - "8443:8443"


  # Heartbeat

  heartbeat-pub:
    container_name: heartbeat-pub
    hostname: heartbeat-pub
    image: ghcr.io/elixir-no/pipeline-heartbeat:latest
    environment:
      - HEARTBEAT_MODE=publisher
      - RABBITMQ_HOST=<<MQ_HOST>>
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=<<PRIVATE_BROKER_USER>>
      - RABBITMQ_PASS=<<PRIVATE_BROKER_PASSWORD>>
      - RABBITMQ_VHOST=<<PRIVATE_BROKER_VHOST>>
      - RABBITMQ_EXCHANGE=sda
      - RABBITMQ_QUEUE=heartbeat
      - RABBITMQ_ROUTING_KEY=sda_heartbeat
      - RABBITMQ_TLS=false
      - RABBITMQ_CA_CERT_PATH=
      - RABBITMQ_TLS_PORT=5671
      - PUBLISH_INTERVAL=60
      - RABBITMQ_MANAGEMENT_PORT=15671
      - PUBLISHER_CONFIG_PATH=/app/publisher_config.json
    volumes:
      - heartbeat-pub-confs:/app/
    depends_on:
      file-orchestrator:
        condition: service_healthy
      mq:
        condition: service_healthy
    links:
      - mq

  heartbeat-sub:
    container_name: heartbeat-sub
    hostname: heartbeat-sub
    image: ghcr.io/elixir-no/pipeline-heartbeat:latest
    environment:
      - HEARTBEAT_MODE=subscriber
      - RABBITMQ_HOST=<<MQ_HOST>>
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=<<PRIVATE_BROKER_USER>>
      - RABBITMQ_PASS=<<PRIVATE_BROKER_PASSWORD>>
      - RABBITMQ_VHOST=<<PRIVATE_BROKER_VHOST>>
      - RABBITMQ_EXCHANGE=sda
      - RABBITMQ_QUEUE=heartbeat
      - RABBITMQ_ROUTING_KEY=sda_heartbeat
      - RABBITMQ_TLS=false
      - RABBITMQ_CA_CERT_PATH=
      - RABBITMQ_TLS_PORT=5671
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    depends_on:
      file-orchestrator:
        condition: service_healthy
      mq:
        condition: service_healthy
      redis:
        condition: service_started
    links:
      - mq
      - redis

  redis:
    container_name: redis
    hostname: redis
    image: redis:alpine
    depends_on:
      file-orchestrator:
        condition: service_healthy
    ports:
      - "6379:6379"


  # Local file orchestrator

  file-orchestrator:
    container_name: file-orchestrator
    build:
      context: .
      dockerfile: file-orchestrator.Dockerfile
    volumes:
      - tsd-inbox:/volumes/tsd-inbox
      - tsd-vault:/volumes/tsd-vault
      - tsd-certs:/volumes/tsd-certs
      - mq-confs-and-certs:/volumes/mq-confs-and-certs
      - proxy-certs:/volumes/proxy-certs
      - postgres-data:/volumes/postgres-data
      - postgres-confs:/volumes/postgres-confs
      - db-data:/volumes/db-data
      - db-certs:/volumes/db-certs
      - sda-certs:/volumes/sda-certs
      - doa-certs:/volumes/doa-certs
      - cegamq-certs:/volumes/cegamq-certs
      - cegamq-confs:/volumes/cegamq-confs
      - heartbeat-pub-confs:/volumes/heartbeat-pub-confs
      - storage:/storage


volumes:
  tsd-inbox:
  tsd-vault:
  tsd-certs:
  mq-confs-and-certs:
  proxy-certs:
  postgres-data:
  postgres-confs:
  db-certs:
  db-data:
  sda-certs:
  doa-certs:
  cegamq-certs:
  cegamq-confs:
  heartbeat-pub-confs:
  storage:
